#pragma checksum "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "351c3bf0f109997c081770b91dd352806dfd630d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(FourN.AdminSite.Pages.Costsalary.Areas_KOPC_Views_Costsalary_DetailBidding), @"mvc.1.0.view", @"/Areas/KOPC/Views/Costsalary/DetailBidding.cshtml")]
namespace FourN.AdminSite.Pages.Costsalary
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\_ViewImports.cshtml"
using FourN.AdminSite;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\_ViewImports.cshtml"
using FourN.Data.ViewModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\_ViewImports.cshtml"
using FourN.AdminSite.Helper;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"351c3bf0f109997c081770b91dd352806dfd630d", @"/Areas/KOPC/Views/Costsalary/DetailBidding.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1675d9f03eda31c1921a03798e9bd970d04b8f71", @"/Areas/KOPC/Views/_ViewImports.cshtml")]
    public class Areas_KOPC_Views_Costsalary_DetailBidding : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<FourN.Data.Models.Projects>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("btn btn-block btn-primary btn-md"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "Costsalary", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "ExportBiddingExcel", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/notify.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 3 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
  
    ViewData["Title"] = "Detail";
    Layout = "~/Views/Shared/_Layout.cshtml";
    List<FourN.Data.Models.Affairs> affairsList = ViewBag.affairList;
    List<FourN.Data.Models.User> userList = ViewBag.userList;
    List<FourN.Data.Models.Request> requestList = ViewBag.requestList;
    List<int> listUser = ViewBag.listUser;
    int sumTask = 0, hoursd = 0;
    long gio1 = 0;
    double costPlan = 0;
    TimeSpan timeStart = TimeSpan.Parse("9:00"), timeEnd = TimeSpan.Parse("18:00"),
    timeMid = TimeSpan.Parse("12:00");

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<div class=""row"">
    <div class=""col-12"">
        <div class=""callout callout-info"">
            <h4><i class=""fas fa-info""></i> PROJECT DETAILS INFORMATION</h4>
        </div>
        <!-- Main content -->
        <div class=""invoice p-3 mb-3"">
            <div class=""row invoice-info"">
                <div class=""col-md-5 invoice-col"">
                    <h5>Project Code: <b style=""color:red"">");
#nullable restore
#line 25 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                                      Write(Model.projectcode);

#line default
#line hidden
#nullable disable
            WriteLiteral("</b></h5>\r\n                    <h5>Project Name: <b style=\"color:darkgreen\">");
#nullable restore
#line 26 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                                            Write(Model.projectname);

#line default
#line hidden
#nullable disable
            WriteLiteral("</b></h5>\r\n                </div>\r\n                <div class=\"col-md-6 invoice-col\">\r\n                    <h5>Start (Plan): <b style=\"color:red\">");
#nullable restore
#line 29 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                                      Write(Model.startplan.ToString("dd/MM/yyyy"));

#line default
#line hidden
#nullable disable
            WriteLiteral("</b></h5>\r\n                    <h5>End (Plan): <b style=\"color:darkgreen\">");
#nullable restore
#line 30 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                                          Write(Model.endplan.ToString("dd/MM/yyyy"));

#line default
#line hidden
#nullable disable
            WriteLiteral("</b></h5>\r\n                </div>\r\n                <div class=\"col-md-1 invoice-col\">\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "351c3bf0f109997c081770b91dd352806dfd630d8191", async() => {
                WriteLiteral("\r\n                        <i class=\"fas fa-save\"></i> Save Excel\r\n                    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            if (__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues == null)
            {
                throw new InvalidOperationException(InvalidTagHelperIndexerAssignment("asp-route-id", "Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper", "RouteValues"));
            }
            BeginWriteTagHelperAttribute();
#nullable restore
#line 33 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                                                                                                              WriteLiteral(Model.projectid);

#line default
#line hidden
#nullable disable
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues["id"] = __tagHelperStringValueBuffer;
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-route-id", __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues["id"], global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </div>
            </div>
            <hr />
            <div class=""row invoice-info"">
                <div class=""col-md-3 invoice-col"">
                    <br />
                    <h4 style=""color:brown"">
                        DETAIL LIST OF TASKS
                    </h4>
                </div>
                <div class=""col-md-5 invoice-col"">
                    <p>
                        <strong>NOTE: </strong><br />
                        With Practitioners is <b>MEMBER</b> Labor Cost is <i style=""color:dimgrey"">100,000 (vnd/h)</i><br />
                        With Practitioners is <b>LEADER</b> Labor Cost is <i style=""color:dimgrey"">200,000 (vnd/h)</i><br />
                        With Practitioners is <b>PM</b> Labor Cost is <i style=""color:dimgrey"">300,000 (vnd/h)</i><br />
                        With Practitioners is <b>FREELANCER</b> Labor Cost is <i style=""color:dimgrey"">80,000 (vnd/h)</i>
                    </p>
                </div>
            ");
            WriteLiteral(@"    <div class=""col-md-4 invoice-col"">
                    <p>
                        <strong>TOTAL COST EQUALS: </strong><br />
                        <i style=""color:red""><b>(Total Time * 500,000) (vnd)</b></i>
                    </p>
                </div>
            </div>
            <hr />
            <!-- Table row -->
            <div class=""row"" style=""overflow:hidden"">
                <div class=""col-12"" style=""overflow-y:scroll"">
                    <table id=""example1"" class=""table table-striped"">
                        <thead>
                            <tr>
                                <th></th>
                                <th>Task Name</th>
                                <th style=""width:50px"">Type Of Task</th>
                                <th>Practitioners</th>
                                <th>Start (Plan)</th>
                                <th>End (Plan)</th>
                                <th>Total Time (Plan)</th>
                                <");
            WriteLiteral("th>Total Cost</th>\r\n                                <th>Estimated Cost</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n");
#nullable restore
#line 81 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                             foreach (var itemTask in affairsList)
                            {
                                long totalTimeUser = 0;
                                DateTime startTime, endTime;
                                int hours = 0, daysx = 0, dayss = 0;
                                double hFull, hCFull, hOFull;

#line default
#line hidden
#nullable disable
            WriteLiteral("                                <tr>\r\n                                    <td></td>\r\n                                    <td>");
#nullable restore
#line 89 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                   Write(itemTask.affairname);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                                    <td>\r\n");
#nullable restore
#line 91 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                         if (itemTask.typeofaffair == 0)
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            <b style=\"color:aqua\">Analisys</b>\r\n");
#nullable restore
#line 94 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                        }
                                        else if (itemTask.typeofaffair == 1)
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            <b style=\"color:blue\">Design</b>\r\n");
#nullable restore
#line 98 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                        }
                                        else if (itemTask.typeofaffair == 2)
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            <b style=\"color:coral\">Implementation</b>\r\n");
#nullable restore
#line 102 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                        }
                                        else if (itemTask.typeofaffair == 3)
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            <b style=\"color:blueviolet\">Testing</b>\r\n");
#nullable restore
#line 106 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                        }
                                        else
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            <b style=\"color:black\">Deployment</b>\r\n");
#nullable restore
#line 110 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                    </td>\r\n                                    <td>\r\n");
#nullable restore
#line 113 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                         foreach (var itemUser in userList)
                                        {
                                            if (itemTask.userid == itemUser.userid)
                                            {
                                                startTime = DateTime.Parse(itemTask.starttimeplan.ToString());
                                                endTime = DateTime.Parse(itemTask.endtimeplan.ToString());

                                                for (DateTime date = startTime; date.DayOfYear <= endTime.DayOfYear; date = date.AddDays(1))
                                                {
                                                    if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
                                                    {

                                                    }
                                                    else
                                                    {
                                                        hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                                        if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                        && startTime.TimeOfDay <= timeMid)
                                                        {
                                                            hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours - 1);
                                                        }
                                                        else if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                            && startTime.TimeOfDay > timeMid)
                                                        {
                                                            hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours);
                                                        }
                                                        else
                                                        {
                                                            hCFull = hFull;
                                                        }
                                                        if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                            && endTime.TimeOfDay > timeMid)
                                                        {
                                                            hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours - 1;
                                                        }
                                                        else if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                            && endTime.TimeOfDay <= timeMid)
                                                        {
                                                            hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours;
                                                        }
                                                        else
                                                        {
                                                            hOFull = hFull;
                                                        }
                                                        dayss++;
                                                        hours = (int)(hCFull + hOFull + (int)(dayss - 2) * hFull);
                                                    }

                                                }

                                                if (itemUser.isemployee == true)
                                                {
                                                    totalTimeUser = hours * 100000;

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <p>");
#nullable restore
#line 166 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                                  Write(itemUser.username);

#line default
#line hidden
#nullable disable
            WriteLiteral(" <b>(Member)</b></p>\r\n");
#nullable restore
#line 167 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                                }
                                                else if (itemUser.islead == true)
                                                {
                                                    totalTimeUser = hours * 200000;

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <p>");
#nullable restore
#line 171 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                                  Write(itemUser.username);

#line default
#line hidden
#nullable disable
            WriteLiteral(" <b>(Leader)</b></p>\r\n");
#nullable restore
#line 172 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                                }
                                                else if (itemUser.isfreelancer == true)
                                                {
                                                    totalTimeUser = hours * 80000;

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <p>");
#nullable restore
#line 176 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                                  Write(itemUser.username);

#line default
#line hidden
#nullable disable
            WriteLiteral(" <b>(Freelancer)</b></p>\r\n");
#nullable restore
#line 177 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                                }
                                                else if (itemUser.islead == false && itemUser.isemployee == false && itemUser.isfreelancer == false)
                                                {
                                                    totalTimeUser = hours * 300000;

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <p>");
#nullable restore
#line 181 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                                  Write(itemUser.username);

#line default
#line hidden
#nullable disable
            WriteLiteral(" <b>(PM)</b></p>\r\n");
#nullable restore
#line 182 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                                }
                                            }
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                    </td>\r\n                                    <td>\r\n                                        ");
#nullable restore
#line 187 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                   Write(itemTask.starttimeplan.ToString("dd/MM/yyyy HH:mm"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                                    </td>\r\n                                    <td>\r\n                                        ");
#nullable restore
#line 190 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                   Write(itemTask.endtimeplan.ToString("dd/MM/yyyy HH:mm"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                                    </td>\r\n                                    <td>\r\n");
#nullable restore
#line 193 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                          
                                            startTime = DateTime.Parse(itemTask.starttimeplan.ToString());
                                            endTime = DateTime.Parse(itemTask.endtimeplan.ToString());

                                            for (DateTime date = startTime; date.DayOfYear <= endTime.DayOfYear; date = date.AddDays(1))
                                            {
                                                if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
                                                {

                                                }
                                                else
                                                {
                                                    hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                                    if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                    && startTime.TimeOfDay <= timeMid)
                                                    {
                                                        hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours - 1);
                                                    }
                                                    else if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                        && startTime.TimeOfDay > timeMid)
                                                    {
                                                        hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours);
                                                    }
                                                    else
                                                    {
                                                        hCFull = hFull;
                                                    }
                                                    if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                        && endTime.TimeOfDay > timeMid)
                                                    {
                                                        hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours - 1;
                                                    }
                                                    else if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                        && endTime.TimeOfDay <= timeMid)
                                                    {
                                                        hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours;
                                                    }
                                                    else
                                                    {
                                                        hOFull = hFull;
                                                    }
                                                    daysx++;
                                                    hours = (int)(hCFull + hOFull + (int)(daysx - 2) * hFull);
                                                    costPlan = hours * 500000;
                                                }

                                            }

                                        

#line default
#line hidden
#nullable disable
            WriteLiteral("                                        <p><b style=\"color:brown\">");
#nullable restore
#line 242 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                                             Write(hours);

#line default
#line hidden
#nullable disable
            WriteLiteral("</b> (hours)</p>\r\n                                    </td>\r\n                                    <td>\r\n                                        <b><strong style=\"color:darkred\">");
#nullable restore
#line 245 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                                                    Write(string.Format("{0:#,##0.00}", costPlan));

#line default
#line hidden
#nullable disable
            WriteLiteral("</strong>(vnd)</b>\r\n                                    </td>\r\n                                    <td>\r\n                                        <b><strong style=\"color:darkred\">");
#nullable restore
#line 248 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                                                    Write(string.Format("{0:#,##0.00}", totalTimeUser));

#line default
#line hidden
#nullable disable
            WriteLiteral("</strong>(vnd)</b>\r\n                                    </td>\r\n                                </tr>\r\n");
#nullable restore
#line 251 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                            }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                        </tbody>
                    </table>
                </div>
                <!-- /.col -->
            </div>
            <!-- /.row -->
            <hr />
            <hr />
        </div>
    </div>
</div>

<div class=""row"">

    <!-- /.col -->
    <div class=""col-6"">
        <p class=""lead"">TOTAL</p>

        <div class=""table-responsive"">
            <table class=""table"">
                <tr>
                    <th style=""width:50%"">Tasks: </th>
                    <td>
");
#nullable restore
#line 275 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                         foreach (var item2 in affairsList)
                        {

                            if (item2.projectid == Model.projectid)
                            {
                                sumTask++;
                            }

                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <b style=\"color:brown\">");
#nullable restore
#line 284 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                          Write(sumTask);

#line default
#line hidden
#nullable disable
            WriteLiteral(" (tasks)</b>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <th>Total Planned Hours: </th>\r\n                    <td>\r\n");
#nullable restore
#line 290 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                         foreach (var itemTask in affairsList.Where(a => a.projectid == Model.projectid))
                        {
                            DateTime startTimeb, endTimeb;
                            int hourss = 0;
                            double hFull, hCFull, hOFull;
                            startTimeb = DateTime.Parse(itemTask.starttimeplan.ToString());
                            endTimeb = DateTime.Parse(itemTask.endtimeplan.ToString());
                            int dayse = 0;

                            for (DateTime date = startTimeb; date.DayOfYear <= endTimeb.DayOfYear; date = date.AddDays(1))
                            {
                                if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
                                {

                                }
                                else
                                {
                                    hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                    if (timeEnd > startTimeb.TimeOfDay && timeStart <= startTimeb.TimeOfDay
                                    && startTimeb.TimeOfDay <= timeMid)
                                    {
                                        hCFull = (((TimeSpan)(timeEnd - startTimeb.TimeOfDay)).TotalHours - 1);
                                    }
                                    else if (timeEnd > startTimeb.TimeOfDay && timeStart <= startTimeb.TimeOfDay
                                        && startTimeb.TimeOfDay > timeMid)
                                    {
                                        hCFull = (((TimeSpan)(timeEnd - startTimeb.TimeOfDay)).TotalHours);
                                    }
                                    else
                                    {
                                        hCFull = hFull;
                                    }
                                    if (timeEnd > endTimeb.TimeOfDay && timeStart <= endTimeb.TimeOfDay
                                        && endTimeb.TimeOfDay > timeMid)
                                    {
                                        hOFull = ((TimeSpan)(endTimeb.TimeOfDay - timeStart)).TotalHours - 1;
                                    }
                                    else if (timeEnd > endTimeb.TimeOfDay && timeStart <= endTimeb.TimeOfDay
                                        && endTimeb.TimeOfDay <= timeMid)
                                    {
                                        hOFull = ((TimeSpan)(endTimeb.TimeOfDay - timeStart)).TotalHours;
                                    }
                                    else
                                    {
                                        hOFull = hFull;
                                    }
                                    dayse++;
                                    hourss = (int)(hCFull + hOFull + (int)(dayse - 2) * hFull);
                                }

                            }
                            hoursd += hourss;
                            costPlan = hoursd * 500000;
                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <p><b style=\"color:brown\">");
#nullable restore
#line 344 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                             Write(hoursd);

#line default
#line hidden
#nullable disable
            WriteLiteral("</b> (hours)</p>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <th>Total Plan Amount</th>\r\n                    <td>\r\n                        <b><strong style=\"color:darkred\">");
#nullable restore
#line 350 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                                    Write(string.Format("{0:#,##0.00}", costPlan));

#line default
#line hidden
#nullable disable
            WriteLiteral("</strong>(vnd)</b>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <th>Total Estimated Amount :</th>\r\n                    <td>\r\n\r\n");
#nullable restore
#line 357 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                         foreach (var itemTask in affairsList.Where(a => a.projectid == Model.projectid))
                        {
                            DateTime startTime, endTime;
                            int hours = 0;
                            double hFull, hCFull, hOFull;
                            foreach (var itemUser in userList.Where(a => a.userid == itemTask.userid))
                            {
                                startTime = DateTime.Parse(itemTask.starttimeplan.ToString());
                                endTime = DateTime.Parse(itemTask.endtimeplan.ToString());
                                int dayss = 0;
                                for (DateTime date = startTime; date.DayOfYear <= endTime.DayOfYear; date = date.AddDays(1))
                                {
                                    if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
                                    {

                                    }
                                    else
                                    {
                                        hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                        if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                        && startTime.TimeOfDay <= timeMid)
                                        {
                                            hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours - 1);
                                        }
                                        else if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                            && startTime.TimeOfDay > timeMid)
                                        {
                                            hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours);
                                        }
                                        else
                                        {
                                            hCFull = hFull;
                                        }
                                        if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                            && endTime.TimeOfDay > timeMid)
                                        {
                                            hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours - 1;
                                        }
                                        else if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                            && endTime.TimeOfDay <= timeMid)
                                        {
                                            hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours;
                                        }
                                        else
                                        {
                                            hOFull = hFull;
                                        }
                                        dayss++;
                                        hours = (int)(hCFull + hOFull + (int)(dayss - 2) * hFull);
                                    }

                                }

                                if (itemUser.isemployee == true)
                                {
                                    gio1 += hours * 100000;
                                }
                                else if (itemUser.islead == true)
                                {

                                    gio1 += hours * 200000;
                                }
                                else if (itemUser.isfreelancer == true) { gio1 += hours * 80000; }
                                else if (itemUser.islead == false && itemUser.isemployee == false && itemUser.isfreelancer == false)
                                {

                                    gio1 += hours * 300000;
                                }
                            }
                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <b><strong style=\"color:darkred\">");
#nullable restore
#line 427 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\DetailBidding.cshtml"
                                                    Write(string.Format("{0:#,##0.00}", gio1));

#line default
#line hidden
#nullable disable
            WriteLiteral("</strong>(vnd)</b>\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n        </div>\r\n    </div>\r\n    <!-- /.col -->\r\n</div>\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        $(function () {
            $(""#example1"").DataTable({
                ""responsive"": false, ""lengthChange"": false, ""autoWidth"": false,
                ""buttons"": [""colvis""]
            }).buttons().container().appendTo('#example1_wrapper .col-md-6:eq(0)');
        });
    </script>
");
            }
            );
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "351c3bf0f109997c081770b91dd352806dfd630d43621", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<FourN.Data.Models.Projects> Html { get; private set; }
    }
}
#pragma warning restore 1591
