#pragma checksum "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1024ac9f3a3ed10ac61200ed4a3a61571224a208"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(FourN.AdminSite.Pages.Costsalary.Areas_KOPC_Views_Costsalary_Index), @"mvc.1.0.view", @"/Areas/KOPC/Views/Costsalary/Index.cshtml")]
namespace FourN.AdminSite.Pages.Costsalary
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\_ViewImports.cshtml"
using FourN.AdminSite;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\_ViewImports.cshtml"
using FourN.Data.ViewModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\_ViewImports.cshtml"
using FourN.AdminSite.Helper;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1024ac9f3a3ed10ac61200ed4a3a61571224a208", @"/Areas/KOPC/Views/Costsalary/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1675d9f03eda31c1921a03798e9bd970d04b8f71", @"/Areas/KOPC/Views/_ViewImports.cshtml")]
    public class Areas_KOPC_Views_Costsalary_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<FourN.Data.Models.Projects>>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("btn btn-block btn-primary btn-xs"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "Costsalary", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "DetailProject", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "DetailBidding", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/notify.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
  
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    List<FourN.Data.Models.Affairs> affairsList = ViewBag.affairList;
    List<FourN.Data.Models.User> userList = ViewBag.userList;
    List<FourN.Data.Models.Request> requestList = ViewBag.requestList;
    TimeSpan timeStart = TimeSpan.Parse("9:00"), timeEnd = TimeSpan.Parse("18:00"),
    timeMid = TimeSpan.Parse("12:00");

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("css", async() => {
                WriteLiteral(@"
    <style>
        .tab {
            overflow: hidden;
            border: 2px solid #ccc;
            background-color: #f1f1f1;
        }

            .tab button {
                background-color: inherit;
                float: left;
                border: none;
                outline: none;
                cursor: pointer;
                padding: 14px 30px;
                transition: 0.3s;
                font-size: 17px;
            }

                .tab button:hover {
                    background-color: #ddd;
                }

                .tab button.active {
                    background-color: #ccc;
                }

        .tabcontent {
            display: block;
            padding: 6px 12px;
            border: 1px solid #ccc;
            border-top: none;
        }
    </style>
");
            }
            );
#nullable restore
#line 48 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
 foreach (var userModel in userList)
{
    if (userModel.islead == true && userModel.userid == Context.Session.GetCurrentAuthentication().UserId)
    {

#line default
#line hidden
#nullable disable
            WriteLiteral("        <div class=\"tab\">\r\n            <button class=\"tablinks\" onclick=\"openCost(event, \'ProjectDone\')\" id=\"defaultOpen\">DONE</button>\r\n            <button class=\"tablinks\" onclick=\"openCost(event, \'ProjectBidding\')\">BIDDING</button>\r\n        </div>\r\n");
            WriteLiteral(@"        <div id=""ProjectDone"" class=""tabcontent"">
            <div class=""row"">
                <div class=""col-md-12"">
                    <div class=""card"">
                        <div class=""card-header"">
                            <h2 class=""card-title"">PROJECT DONE</h2>
                        </div>
                        <br />
                        <div class=""card-body table-responsive p-0"" style=""height: 500px;"">
                            <table id=""example2"" class=""table table-bordered table-striped"">
                                <thead>
                                    <tr>
                                        <th style=""width: 50px"">Project Code</th>
                                        <th>Project Name</th>
                                        <th>Total Tasks</th>
                                        <th>Total Plan</th>
                                        <th>Total Actual</th>
                                        <th>Cost Plan</th>
              ");
            WriteLiteral("                          <th>Cost Actual</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n");
#nullable restore
#line 80 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                     foreach (var itemProject in Model)
                                    {
                                        long totalTask = 0, gio1 = 0, moneyrequest = 0;
                                        double ot1 = 0, costtotal = 0;
                                        int hoursc = 0, hoursd = 0;
                                        double costPlan = 0;
                                        if (itemProject.status == 6 && itemProject.leaderid == Context.Session.GetCurrentAuthentication().UserId)
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            <tr>\r\n                                                <td>");
#nullable restore
#line 89 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                               Write(itemProject.projectcode);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                                                <td>");
#nullable restore
#line 90 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                               Write(itemProject.projectname);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                                                <td>\r\n");
#nullable restore
#line 92 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                     foreach (var item2 in affairsList)
                                                    {
                                                        if (item2.projectid == itemProject.projectid)
                                                        {
                                                            totalTask++;
                                                        }

                                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <p>");
#nullable restore
#line 100 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                  Write(totalTask);

#line default
#line hidden
#nullable disable
            WriteLiteral(" (tasks)</p>\r\n                                                </td>\r\n                                                <td>\r\n");
#nullable restore
#line 103 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                     foreach (var itemTask in affairsList)
                                                    {
                                                        DateTime startTime, endTime;
                                                        double hFull, hCFull, hOFull;
                                                        int houra = 0;

                                                        if (itemTask.projectid == itemProject.projectid)
                                                        {
                                                            startTime = DateTime.Parse(itemTask.starttimeplan.ToString());
                                                            endTime = DateTime.Parse(itemTask.endtimeplan.ToString());
                                                            hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                                            int dayss = 0;

                                                            for (DateTime date = startTime; date.DayOfYear <= endTime.DayOfYear; date = date.AddDays(1))
                                                            {
                                                                if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                                                    if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                                    && startTime.TimeOfDay <= timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours - 1);
                                                                    }
                                                                    else if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                                        && startTime.TimeOfDay > timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours);
                                                                    }
                                                                    else
                                                                    {
                                                                        hCFull = hFull;
                                                                    }
                                                                    if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                                        && endTime.TimeOfDay > timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours - 1;
                                                                    }
                                                                    else if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                                        && endTime.TimeOfDay <= timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours;
                                                                    }
                                                                    else
                                                                    {
                                                                        hOFull = hFull;
                                                                    }
                                                                    dayss++;
                                                                    houra = (int)(hCFull + hOFull + (int)(dayss - 2) * hFull);
                                                                }

                                                            }
                                                            hoursc += houra;
                                                            costPlan = hoursc * 500000;
                                                        }

                                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <p><b style=\"color:brown\">");
#nullable restore
#line 163 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                                         Write(hoursc);

#line default
#line hidden
#nullable disable
            WriteLiteral(" (hours)</b></p>\r\n                                                </td>\r\n                                                <td>\r\n");
#nullable restore
#line 166 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                     foreach (var itemTask in affairsList)
                                                    {
                                                        DateTime startTimeb, endTimeb;
                                                        double hFull, hCFull, hOFull;
                                                        int hourss = 0, dayse = 0;
                                                        if (itemTask.projectid == itemProject.projectid)
                                                        {
                                                            startTimeb = DateTime.Parse(itemTask.starttimeactual.Value.ToString());
                                                            endTimeb = DateTime.Parse(itemTask.endtimeactual.Value.ToString());
                                                            hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                                            for (DateTime date = startTimeb; date.DayOfYear <= endTimeb.DayOfYear; date = date.AddDays(1))
                                                            {
                                                                if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                                                    if (timeEnd > startTimeb.TimeOfDay && timeStart <= startTimeb.TimeOfDay
                                                                    && startTimeb.TimeOfDay <= timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTimeb.TimeOfDay)).TotalHours - 1);
                                                                    }
                                                                    else if (timeEnd > startTimeb.TimeOfDay && timeStart <= startTimeb.TimeOfDay
                                                                        && startTimeb.TimeOfDay > timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTimeb.TimeOfDay)).TotalHours);
                                                                    }
                                                                    else
                                                                    {
                                                                        hCFull = hFull;
                                                                    }
                                                                    if (timeEnd > endTimeb.TimeOfDay && timeStart <= endTimeb.TimeOfDay
                                                                        && endTimeb.TimeOfDay > timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTimeb.TimeOfDay - timeStart)).TotalHours - 1;
                                                                    }
                                                                    else if (timeEnd > endTimeb.TimeOfDay && timeStart <= endTimeb.TimeOfDay
                                                                        && endTimeb.TimeOfDay <= timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTimeb.TimeOfDay - timeStart)).TotalHours;
                                                                    }
                                                                    else
                                                                    {
                                                                        hOFull = hFull;
                                                                    }
                                                                    dayse++;
                                                                    hourss = (int)(hCFull + hOFull + (int)(dayse - 2) * hFull);
                                                                }

                                                            }
                                                            hoursd += hourss;
                                                        }

                                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <p><b style=\"color:brown\">");
#nullable restore
#line 222 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                                         Write(hoursd);

#line default
#line hidden
#nullable disable
            WriteLiteral(" (hours)</b></p>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <p>");
#nullable restore
#line 225 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                  Write(string.Format("{0:#,##0.00}", costPlan));

#line default
#line hidden
#nullable disable
            WriteLiteral(" (vnd)</p>\r\n                                                </td>\r\n                                                <td>\r\n");
#nullable restore
#line 228 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                     foreach (var itemTask in affairsList.Where(a => a.projectid == itemProject.projectid))
                                                    {
                                                        DateTime startTime, endTime;
                                                        int hoursa = 0;
                                                        double hFull, hCFull, hOFull;
                                                        foreach (var itemUser in userList.Where(a => a.userid == itemTask.userid))
                                                        {

                                                            startTime = DateTime.Parse(itemTask.starttimeactual.Value.ToString());
                                                            endTime = DateTime.Parse(itemTask.endtimeactual.Value.ToString());
                                                            int dayss = 0;

                                                            for (DateTime date = startTime; date.DayOfYear <= endTime.DayOfYear; date = date.AddDays(1))
                                                            {
                                                                if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                                                    if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                                    && startTime.TimeOfDay <= timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours - 1);
                                                                    }
                                                                    else if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                                        && startTime.TimeOfDay > timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours);
                                                                    }
                                                                    else
                                                                    {
                                                                        hCFull = hFull;
                                                                    }
                                                                    if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                                        && endTime.TimeOfDay > timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours - 1;
                                                                    }
                                                                    else if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                                        && endTime.TimeOfDay <= timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours;
                                                                    }
                                                                    else
                                                                    {
                                                                        hOFull = hFull;
                                                                    }
                                                                    dayss++;
                                                                    hoursa = (int)(hCFull + hOFull + (int)(dayss - 2) * hFull);
                                                                }

                                                            }

                                                            if (itemUser.isemployee == true)
                                                            {

                                                                gio1 += hoursa * 100000;
                                                            }
                                                            else if (itemUser.islead == true)
                                                            {

                                                                gio1 += hoursa * 200000;
                                                            }
                                                            else if (itemUser.isfreelancer == true)
                                                            {

                                                                gio1 += hoursa * 80000;
                                                            }
                                                            else if (itemUser.islead == false && itemUser.isemployee == false && itemUser.isfreelancer == false)
                                                            {

                                                                gio1 += hoursa * 300000;
                                                            }

                                                            foreach (var itemRequest in requestList.Where(a => a.taskid == itemTask.affairid))
                                                            {
                                                                if (itemRequest.requestname == "Overtime" && itemRequest.status == 1)
                                                                {
                                                                    if (itemUser.islead == true)
                                                                    {
                                                                        ot1 += ((long)itemRequest.totaltime) * 200000 * 2;
                                                                    }
                                                                    else if (itemUser.isemployee == true)
                                                                    {
                                                                        ot1 += ((long)itemRequest.totaltime) * 100000 * 2;
                                                                    }
                                                                    else if (itemUser.isemployee == false && itemUser.islead == false && itemUser.isfreelancer == false)
                                                                    {
                                                                        ot1 += ((long)itemRequest.totaltime) * 300000 * 2;
                                                                    }
                                                                }
                                                                else if (itemRequest.requestname == "RequestMoney" && itemRequest.status == 1)
                                                                {
                                                                    moneyrequest += (long)itemRequest.requestmoney;
                                                                }
                                                            }
                                                        }
                                                    }

#line default
#line hidden
#nullable disable
#nullable restore
#line 328 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                      
                                                        costtotal = (long)gio1 + ot1 + moneyrequest;
                                                    

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <p>");
#nullable restore
#line 331 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                  Write(string.Format("{0:#,##0.00}", costtotal));

#line default
#line hidden
#nullable disable
            WriteLiteral(" (vnd)</p>\r\n                                                </td>\r\n                                                <td>\r\n                                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1024ac9f3a3ed10ac61200ed4a3a61571224a20833830", async() => {
                WriteLiteral("\r\n                                                        <i class=\"fas fa-edit\"></i> Detail\r\n                                                    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            if (__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues == null)
            {
                throw new InvalidOperationException(InvalidTagHelperIndexerAssignment("asp-route-id", "Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper", "RouteValues"));
            }
            BeginWriteTagHelperAttribute();
#nullable restore
#line 334 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                                                                                                                         WriteLiteral(itemProject.projectid);

#line default
#line hidden
#nullable disable
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues["id"] = __tagHelperStringValueBuffer;
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-route-id", __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues["id"], global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                </td>\r\n                                            </tr>\r\n");
#nullable restore
#line 339 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                        }
                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id=""ProjectBidding"" class=""tabcontent"">
            <div class=""row"">
                <div class=""col-md-12"">
                    <div class=""card"">
                        <div class=""card-header"">
                            <h2 class=""card-title"">PROJECT BIDDING</h2>
                        </div>
                        <br />
                        <div class=""card-body table-responsive p-0"" style=""height: 500px;"">
                            <table id=""example1"" class=""table table-bordered table-striped"">
                                <thead>
                                    <tr>
                                        <th style=""width: 50px"">Project Code</th>
                                        <th>Project Name</th>
                                        <th>Total Task");
            WriteLiteral(@"s</th>
                                        <th>Total Plan</th>
                                        <th>Cost Plan</th>
                                        <th>Estimated Cost</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
");
#nullable restore
#line 370 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                     foreach (var itemProject in Model)
                                    {
                                        long totalTask = 0, gio1 = 0;
                                        int hoursf = 0;
                                        double costPlan = 0, planCost = 0;
                                        if (itemProject.status == 0 && itemProject.leaderid == Context.Session.GetCurrentAuthentication().UserId)
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            <tr>\r\n                                                <td>");
#nullable restore
#line 378 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                               Write(itemProject.projectcode);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                                                <td>");
#nullable restore
#line 379 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                               Write(itemProject.projectname);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                                                <td>\r\n");
#nullable restore
#line 381 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                     foreach (var item2 in affairsList)
                                                    {
                                                        if (item2.projectid == itemProject.projectid)
                                                        {
                                                            totalTask++;
                                                        }

                                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <p>");
#nullable restore
#line 389 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                  Write(totalTask);

#line default
#line hidden
#nullable disable
            WriteLiteral(" (tasks)</p>\r\n                                                </td>\r\n                                                <td>\r\n");
#nullable restore
#line 392 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                     foreach (var itemTask in affairsList)
                                                    {
                                                        DateTime startTime, endTime;
                                                        double hFull, hCFull, hOFull;
                                                        int houra = 0;

                                                        if (itemTask.projectid == itemProject.projectid)
                                                        {
                                                            startTime = DateTime.Parse(itemTask.starttimeplan.ToString());
                                                            endTime = DateTime.Parse(itemTask.endtimeplan.ToString());
                                                            hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                                            int dayss = 0;

                                                            for (DateTime date = startTime; date.DayOfYear <= endTime.DayOfYear; date = date.AddDays(1))
                                                            {
                                                                if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                                                    if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                                    && startTime.TimeOfDay <= timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours - 1);
                                                                    }
                                                                    else if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                                        && startTime.TimeOfDay > timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours);
                                                                    }
                                                                    else
                                                                    {
                                                                        hCFull = hFull;
                                                                    }
                                                                    if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                                        && endTime.TimeOfDay > timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours - 1;
                                                                    }
                                                                    else if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                                        && endTime.TimeOfDay <= timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours;
                                                                    }
                                                                    else
                                                                    {
                                                                        hOFull = hFull;
                                                                    }
                                                                    dayss++;
                                                                    houra = (int)(hCFull + hOFull + (int)(dayss - 2) * hFull);
                                                                }

                                                            }
                                                            hoursf += houra;
                                                            planCost = hoursf * 500000;
                                                        }

                                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <p><b style=\"color:brown\">");
#nullable restore
#line 452 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                                         Write(hoursf);

#line default
#line hidden
#nullable disable
            WriteLiteral(" (hours)</b></p>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <b><strong style=\"color:darkred\">");
#nullable restore
#line 455 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                                                Write(string.Format("{0:#,##0.00}", planCost));

#line default
#line hidden
#nullable disable
            WriteLiteral("</strong>(vnd)</b>\r\n                                                </td>\r\n                                                <td>\r\n");
#nullable restore
#line 458 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                     foreach (var itemTask in affairsList.Where(a => a.projectid == itemProject.projectid))
                                                    {
                                                        DateTime startTime, endTime;
                                                        int hoursa = 0;
                                                        double hFull, hCFull, hOFull;
                                                        foreach (var itemUser in userList.Where(a => a.userid == itemTask.userid))
                                                        {

                                                            startTime = DateTime.Parse(itemTask.starttimeplan.ToString());
                                                            endTime = DateTime.Parse(itemTask.endtimeplan.ToString());
                                                            int dayss = 0;

                                                            for (DateTime date = startTime; date.DayOfYear <= endTime.DayOfYear; date = date.AddDays(1))
                                                            {
                                                                if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                                                    if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                                    && startTime.TimeOfDay <= timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours - 1);
                                                                    }
                                                                    else if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                                        && startTime.TimeOfDay > timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours);
                                                                    }
                                                                    else
                                                                    {
                                                                        hCFull = hFull;
                                                                    }
                                                                    if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                                        && endTime.TimeOfDay > timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours - 1;
                                                                    }
                                                                    else if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                                        && endTime.TimeOfDay <= timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours;
                                                                    }
                                                                    else
                                                                    {
                                                                        hOFull = hFull;
                                                                    }
                                                                    dayss++;
                                                                    hoursa = (int)(hCFull + hOFull + (int)(dayss - 2) * hFull);
                                                                }

                                                            }

                                                            if (itemUser.isemployee == true)
                                                            {

                                                                gio1 += hoursa * 100000;
                                                            }
                                                            else if (itemUser.islead == true)
                                                            {

                                                                gio1 += hoursa * 200000;
                                                            }
                                                            else if (itemUser.isfreelancer == true)
                                                            {

                                                                gio1 += hoursa * 80000;
                                                            }
                                                            else if (itemUser.islead == false && itemUser.isemployee == false && itemUser.isfreelancer == false)
                                                            {

                                                                gio1 += hoursa * 300000;
                                                            }
                                                        }
                                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                                                    <b><strong style=\"color:darkred\">");
#nullable restore
#line 536 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                                                Write(string.Format("{0:#,##0.00}", gio1));

#line default
#line hidden
#nullable disable
            WriteLiteral("</strong>(vnd)</b>\r\n                                                </td>\r\n                                                <td>\r\n                                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1024ac9f3a3ed10ac61200ed4a3a61571224a20854984", async() => {
                WriteLiteral("\r\n                                                        <i class=\"fas fa-edit\"></i> Detail\r\n                                                    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            if (__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues == null)
            {
                throw new InvalidOperationException(InvalidTagHelperIndexerAssignment("asp-route-id", "Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper", "RouteValues"));
            }
            BeginWriteTagHelperAttribute();
#nullable restore
#line 539 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                                                                                                                         WriteLiteral(itemProject.projectid);

#line default
#line hidden
#nullable disable
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues["id"] = __tagHelperStringValueBuffer;
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-route-id", __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues["id"], global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                </td>\r\n                                            </tr>\r\n");
#nullable restore
#line 544 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                        }
                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n");
#nullable restore
#line 553 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
    }
    else if (userModel.islead == false && userModel.isemployee == false && userModel.userid == Context.Session.GetCurrentAuthentication().UserId)
    {

#line default
#line hidden
#nullable disable
            WriteLiteral("        <div class=\"tab\">\r\n            <button class=\"tablinks\" onclick=\"openCost(event, \'ProjectDone\')\" id=\"defaultOpen\">DONE</button>\r\n            <button class=\"tablinks\" onclick=\"openCost(event, \'ProjectBidding\')\">BIDDING</button>\r\n        </div>\r\n");
            WriteLiteral(@"        <div id=""ProjectDone"" class=""tabcontent"">
            <div class=""row"">
                <div class=""col-md-12"">
                    <div class=""card"">
                        <div class=""card-header"">
                            <h2 class=""card-title"">PROJECT DONE</h2>
                        </div>
                        <br />
                        <div class=""card-body table-responsive p-0"" style=""height: 500px;"">
                            <table id=""example2"" class=""table table-bordered table-striped"">
                                <thead>
                                    <tr>
                                        <th style=""width: 50px"">Project Code</th>
                                        <th>Project Name</th>
                                        <th>Total Tasks</th>
                                        <th>Total Plan</th>
                                        <th>Total Actual</th>
                                        <th>Cost Plan</th>
              ");
            WriteLiteral("                          <th>Cost Actual</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n");
#nullable restore
#line 585 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                     foreach (var itemProject in Model)
                                    {
                                        long totalTask = 0, gio1 = 0, moneyrequest = 0;
                                        double ot1 = 0, costtotal = 0;
                                        int hoursc = 0, hoursd = 0;
                                        double costPlan = 0;
                                        if (itemProject.status == 6)
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            <tr>\r\n                                                <td>");
#nullable restore
#line 594 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                               Write(itemProject.projectcode);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                                                <td>");
#nullable restore
#line 595 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                               Write(itemProject.projectname);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                                                <td>\r\n");
#nullable restore
#line 597 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                     foreach (var item2 in affairsList)
                                                    {
                                                        if (item2.projectid == itemProject.projectid)
                                                        {
                                                            totalTask++;
                                                        }

                                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <p>");
#nullable restore
#line 605 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                  Write(totalTask);

#line default
#line hidden
#nullable disable
            WriteLiteral(" (tasks)</p>\r\n                                                </td>\r\n                                                <td>\r\n");
#nullable restore
#line 608 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                     foreach (var itemTask in affairsList)
                                                    {
                                                        DateTime startTime, endTime;
                                                        double hFull, hCFull, hOFull;
                                                        int houra = 0;

                                                        if (itemTask.projectid == itemProject.projectid)
                                                        {
                                                            startTime = DateTime.Parse(itemTask.starttimeplan.ToString());
                                                            endTime = DateTime.Parse(itemTask.endtimeplan.ToString());
                                                            hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                                            int dayss = 0;

                                                            for (DateTime date = startTime; date.DayOfYear <= endTime.DayOfYear; date = date.AddDays(1))
                                                            {
                                                                if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                                                    if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                                    && startTime.TimeOfDay <= timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours - 1);
                                                                    }
                                                                    else if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                                        && startTime.TimeOfDay > timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours);
                                                                    }
                                                                    else
                                                                    {
                                                                        hCFull = hFull;
                                                                    }
                                                                    if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                                        && endTime.TimeOfDay > timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours - 1;
                                                                    }
                                                                    else if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                                        && endTime.TimeOfDay <= timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours;
                                                                    }
                                                                    else
                                                                    {
                                                                        hOFull = hFull;
                                                                    }
                                                                    dayss++;
                                                                    houra = (int)(hCFull + hOFull + (int)(dayss - 2) * hFull);
                                                                }

                                                            }
                                                            hoursc += houra;
                                                            costPlan = hoursc * 500000;
                                                        }

                                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <p><b style=\"color:brown\">");
#nullable restore
#line 668 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                                         Write(hoursc);

#line default
#line hidden
#nullable disable
            WriteLiteral(" (hours)</b></p>\r\n                                                </td>\r\n                                                <td>\r\n");
#nullable restore
#line 671 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                     foreach (var itemTask in affairsList)
                                                    {
                                                        DateTime startTimeb, endTimeb;
                                                        double hFull, hCFull, hOFull;
                                                        int hourss = 0, dayse = 0;
                                                        if (itemTask.projectid == itemProject.projectid)
                                                        {
                                                            startTimeb = DateTime.Parse(itemTask.starttimeactual.Value.ToString());
                                                            endTimeb = DateTime.Parse(itemTask.endtimeactual.Value.ToString());
                                                            hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                                            for (DateTime date = startTimeb; date.DayOfYear <= endTimeb.DayOfYear; date = date.AddDays(1))
                                                            {
                                                                if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                                                    if (timeEnd > startTimeb.TimeOfDay && timeStart <= startTimeb.TimeOfDay
                                                                    && startTimeb.TimeOfDay <= timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTimeb.TimeOfDay)).TotalHours - 1);
                                                                    }
                                                                    else if (timeEnd > startTimeb.TimeOfDay && timeStart <= startTimeb.TimeOfDay
                                                                        && startTimeb.TimeOfDay > timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTimeb.TimeOfDay)).TotalHours);
                                                                    }
                                                                    else
                                                                    {
                                                                        hCFull = hFull;
                                                                    }
                                                                    if (timeEnd > endTimeb.TimeOfDay && timeStart <= endTimeb.TimeOfDay
                                                                        && endTimeb.TimeOfDay > timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTimeb.TimeOfDay - timeStart)).TotalHours - 1;
                                                                    }
                                                                    else if (timeEnd > endTimeb.TimeOfDay && timeStart <= endTimeb.TimeOfDay
                                                                        && endTimeb.TimeOfDay <= timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTimeb.TimeOfDay - timeStart)).TotalHours;
                                                                    }
                                                                    else
                                                                    {
                                                                        hOFull = hFull;
                                                                    }
                                                                    dayse++;
                                                                    hourss = (int)(hCFull + hOFull + (int)(dayse - 2) * hFull);
                                                                }

                                                            }
                                                            hoursd += hourss;
                                                        }

                                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <p><b style=\"color:brown\">");
#nullable restore
#line 727 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                                         Write(hoursd);

#line default
#line hidden
#nullable disable
            WriteLiteral(" (hours)</b></p>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <p>");
#nullable restore
#line 730 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                  Write(string.Format("{0:#,##0.00}", costPlan));

#line default
#line hidden
#nullable disable
            WriteLiteral(" (vnd)</p>\r\n                                                </td>\r\n                                                <td>\r\n");
#nullable restore
#line 733 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                     foreach (var itemTask in affairsList.Where(a => a.projectid == itemProject.projectid))
                                                    {
                                                        DateTime startTime, endTime;
                                                        int hoursa = 0;
                                                        double hFull, hCFull, hOFull;
                                                        foreach (var itemUser in userList.Where(a => a.userid == itemTask.userid))
                                                        {

                                                            startTime = DateTime.Parse(itemTask.starttimeactual.Value.ToString());
                                                            endTime = DateTime.Parse(itemTask.endtimeactual.Value.ToString());
                                                            int dayss = 0;

                                                            for (DateTime date = startTime; date.DayOfYear <= endTime.DayOfYear; date = date.AddDays(1))
                                                            {
                                                                if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                                                    if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                                    && startTime.TimeOfDay <= timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours - 1);
                                                                    }
                                                                    else if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                                        && startTime.TimeOfDay > timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours);
                                                                    }
                                                                    else
                                                                    {
                                                                        hCFull = hFull;
                                                                    }
                                                                    if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                                        && endTime.TimeOfDay > timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours - 1;
                                                                    }
                                                                    else if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                                        && endTime.TimeOfDay <= timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours;
                                                                    }
                                                                    else
                                                                    {
                                                                        hOFull = hFull;
                                                                    }
                                                                    dayss++;
                                                                    hoursa = (int)(hCFull + hOFull + (int)(dayss - 2) * hFull);
                                                                }

                                                            }

                                                            if (itemUser.isemployee == true)
                                                            {

                                                                gio1 += hoursa * 100000;
                                                            }
                                                            else if (itemUser.islead == true)
                                                            {

                                                                gio1 += hoursa * 200000;
                                                            }
                                                            else if (itemUser.isfreelancer == true)
                                                            {

                                                                gio1 += hoursa * 80000;
                                                            }
                                                            else if (itemUser.islead == false && itemUser.isemployee == false && itemUser.isfreelancer == false)
                                                            {

                                                                gio1 += hoursa * 300000;
                                                            }

                                                            foreach (var itemRequest in requestList.Where(a => a.taskid == itemTask.affairid))
                                                            {
                                                                if (itemRequest.requestname == "Overtime" && itemRequest.status == 1)
                                                                {
                                                                    if (itemUser.islead == true)
                                                                    {
                                                                        ot1 += ((long)itemRequest.totaltime) * 200000 * 2;
                                                                    }
                                                                    else if (itemUser.isemployee == true)
                                                                    {
                                                                        ot1 += ((long)itemRequest.totaltime) * 100000 * 2;
                                                                    }
                                                                    else if (itemUser.isemployee == false && itemUser.islead == false && itemUser.isfreelancer == false)
                                                                    {
                                                                        ot1 += ((long)itemRequest.totaltime) * 300000 * 2;
                                                                    }
                                                                }
                                                                else if (itemRequest.requestname == "RequestMoney" && itemRequest.status == 1)
                                                                {
                                                                    moneyrequest += (long)itemRequest.requestmoney;
                                                                }
                                                            }
                                                        }
                                                    }

#line default
#line hidden
#nullable disable
#nullable restore
#line 833 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                      
                                                        costtotal = (long)gio1 + ot1 + moneyrequest;
                                                    

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <p>");
#nullable restore
#line 836 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                  Write(string.Format("{0:#,##0.00}", costtotal));

#line default
#line hidden
#nullable disable
            WriteLiteral(" (vnd)</p>\r\n                                                </td>\r\n                                                <td>\r\n                                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1024ac9f3a3ed10ac61200ed4a3a61571224a20885139", async() => {
                WriteLiteral("\r\n                                                        <i class=\"fas fa-edit\"></i> Detail\r\n                                                    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            if (__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues == null)
            {
                throw new InvalidOperationException(InvalidTagHelperIndexerAssignment("asp-route-id", "Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper", "RouteValues"));
            }
            BeginWriteTagHelperAttribute();
#nullable restore
#line 839 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                                                                                                                         WriteLiteral(itemProject.projectid);

#line default
#line hidden
#nullable disable
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues["id"] = __tagHelperStringValueBuffer;
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-route-id", __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues["id"], global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                </td>\r\n                                            </tr>\r\n");
#nullable restore
#line 844 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                        }
                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id=""ProjectBidding"" class=""tabcontent"">
            <div class=""row"">
                <div class=""col-md-12"">
                    <div class=""card"">
                        <div class=""card-header"">
                            <h2 class=""card-title"">PROJECT BIDDING</h2>
                        </div>
                        <br />
                        <div class=""card-body table-responsive p-0"" style=""height: 500px;"">
                            <table id=""example1"" class=""table table-bordered table-striped"">
                                <thead>
                                    <tr>
                                        <th style=""width: 50px"">Project Code</th>
                                        <th>Project Name</th>
                                        <th>Total Task");
            WriteLiteral(@"s</th>
                                        <th>Total Plan</th>
                                        <th>Cost Plan</th>
                                        <th>Estimated Cost</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
");
#nullable restore
#line 875 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                     foreach (var itemProject in Model)
                                    {
                                        long totalTask = 0, gio1 = 0;
                                        int hoursf = 0;
                                        double costPlan = 0, planCost = 0;
                                        if (itemProject.status == 0)
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            <tr>\r\n                                                <td>");
#nullable restore
#line 883 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                               Write(itemProject.projectcode);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                                                <td>");
#nullable restore
#line 884 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                               Write(itemProject.projectname);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                                                <td>\r\n");
#nullable restore
#line 886 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                     foreach (var item2 in affairsList)
                                                    {
                                                        if (item2.projectid == itemProject.projectid)
                                                        {
                                                            totalTask++;
                                                        }

                                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <p>");
#nullable restore
#line 894 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                  Write(totalTask);

#line default
#line hidden
#nullable disable
            WriteLiteral(" (tasks)</p>\r\n                                                </td>\r\n                                                <td>\r\n");
#nullable restore
#line 897 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                     foreach (var itemTask in affairsList)
                                                    {
                                                        DateTime startTime, endTime;
                                                        double hFull, hCFull, hOFull;
                                                        int houra = 0;

                                                        if (itemTask.projectid == itemProject.projectid)
                                                        {
                                                            startTime = DateTime.Parse(itemTask.starttimeplan.ToString());
                                                            endTime = DateTime.Parse(itemTask.endtimeplan.ToString());
                                                            hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                                            int dayss = 0;

                                                            for (DateTime date = startTime; date.DayOfYear <= endTime.DayOfYear; date = date.AddDays(1))
                                                            {
                                                                if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                                                    if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                                    && startTime.TimeOfDay <= timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours - 1);
                                                                    }
                                                                    else if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                                        && startTime.TimeOfDay > timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours);
                                                                    }
                                                                    else
                                                                    {
                                                                        hCFull = hFull;
                                                                    }
                                                                    if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                                        && endTime.TimeOfDay > timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours - 1;
                                                                    }
                                                                    else if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                                        && endTime.TimeOfDay <= timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours;
                                                                    }
                                                                    else
                                                                    {
                                                                        hOFull = hFull;
                                                                    }
                                                                    dayss++;
                                                                    houra = (int)(hCFull + hOFull + (int)(dayss - 2) * hFull);
                                                                }

                                                            }
                                                            hoursf += houra;
                                                            planCost = hoursf * 500000;
                                                        }

                                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <p><b style=\"color:brown\">");
#nullable restore
#line 957 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                                         Write(hoursf);

#line default
#line hidden
#nullable disable
            WriteLiteral(" (hours)</b></p>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <b><strong style=\"color:darkred\">");
#nullable restore
#line 960 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                                                Write(string.Format("{0:#,##0.00}", planCost));

#line default
#line hidden
#nullable disable
            WriteLiteral("</strong>(vnd)</b>\r\n                                                </td>\r\n                                                <td>\r\n");
#nullable restore
#line 963 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                     foreach (var itemTask in affairsList.Where(a => a.projectid == itemProject.projectid))
                                                    {
                                                        DateTime startTime, endTime;
                                                        int hoursa = 0;
                                                        double hFull, hCFull, hOFull;
                                                        foreach (var itemUser in userList.Where(a => a.userid == itemTask.userid))
                                                        {

                                                            startTime = DateTime.Parse(itemTask.starttimeplan.ToString());
                                                            endTime = DateTime.Parse(itemTask.endtimeplan.ToString());
                                                            int dayss = 0;

                                                            for (DateTime date = startTime; date.DayOfYear <= endTime.DayOfYear; date = date.AddDays(1))
                                                            {
                                                                if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    hFull = ((TimeSpan)(timeEnd - timeStart)).TotalHours - 1;
                                                                    if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                                    && startTime.TimeOfDay <= timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours - 1);
                                                                    }
                                                                    else if (timeEnd > startTime.TimeOfDay && timeStart <= startTime.TimeOfDay
                                                                        && startTime.TimeOfDay > timeMid)
                                                                    {
                                                                        hCFull = (((TimeSpan)(timeEnd - startTime.TimeOfDay)).TotalHours);
                                                                    }
                                                                    else
                                                                    {
                                                                        hCFull = hFull;
                                                                    }
                                                                    if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                                        && endTime.TimeOfDay > timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours - 1;
                                                                    }
                                                                    else if (timeEnd > endTime.TimeOfDay && timeStart <= endTime.TimeOfDay
                                                                        && endTime.TimeOfDay <= timeMid)
                                                                    {
                                                                        hOFull = ((TimeSpan)(endTime.TimeOfDay - timeStart)).TotalHours;
                                                                    }
                                                                    else
                                                                    {
                                                                        hOFull = hFull;
                                                                    }
                                                                    dayss++;
                                                                    hoursa = (int)(hCFull + hOFull + (int)(dayss - 2) * hFull);
                                                                }

                                                            }

                                                            if (itemUser.isemployee == true)
                                                            {

                                                                gio1 += hoursa * 100000;
                                                            }
                                                            else if (itemUser.islead == true)
                                                            {

                                                                gio1 += hoursa * 200000;
                                                            }
                                                            else if (itemUser.isfreelancer == true)
                                                            {

                                                                gio1 += hoursa * 80000;
                                                            }
                                                            else if (itemUser.islead == false && itemUser.isemployee == false && itemUser.isfreelancer == false)
                                                            {

                                                                gio1 += hoursa * 300000;
                                                            }
                                                        }
                                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                                                    <b><strong style=\"color:darkred\">");
#nullable restore
#line 1041 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                                                Write(string.Format("{0:#,##0.00}", gio1));

#line default
#line hidden
#nullable disable
            WriteLiteral("</strong>(vnd)</b>\r\n                                                </td>\r\n                                                <td>\r\n                                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1024ac9f3a3ed10ac61200ed4a3a61571224a208106217", async() => {
                WriteLiteral("\r\n                                                        <i class=\"fas fa-edit\"></i> Detail\r\n                                                    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            if (__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues == null)
            {
                throw new InvalidOperationException(InvalidTagHelperIndexerAssignment("asp-route-id", "Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper", "RouteValues"));
            }
            BeginWriteTagHelperAttribute();
#nullable restore
#line 1044 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                                                                                                                                         WriteLiteral(itemProject.projectid);

#line default
#line hidden
#nullable disable
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues["id"] = __tagHelperStringValueBuffer;
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-route-id", __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues["id"], global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                </td>\r\n                                            </tr>\r\n");
#nullable restore
#line 1049 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
                                        }
                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n");
#nullable restore
#line 1058 "E:\FPT-Aptech\Project Sem4\FourN-final\FourN-final\FourN-20-7-2021\C#Project\FourN.AdminSite\Areas\KOPC\Views\Costsalary\Index.cshtml"
    }
}

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n\r\n\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        $(document).ready(function () {
            //add color background
            $('li.Costsalary').css('background-color', 'azure');
        });
        $(function () {
            $(""#example1"").DataTable({
                ""responsive"": true, ""lengthChange"": false, ""autoWidth"": false,
            }).buttons().container().appendTo('#example1_wrapper .col-md-6:eq(0)');
        });

        $(function () {
            $(""#example2"").DataTable({
                ""responsive"": true, ""lengthChange"": false, ""autoWidth"": false,
            }).buttons().container().appendTo('#example2_wrapper .col-md-6:eq(0)');
        });

        function openCost(evt, requestName) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName(""tabcontent"");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = ""none"";
            }
            tablinks = document.getElementsByClassName(""tablinks"");
      ");
                WriteLiteral(@"      for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace("" active"", """");
            }
            document.getElementById(requestName).style.display = ""block"";
            evt.currentTarget.className += "" active"";
        }
        document.getElementById(""defaultOpen"").click();
    </script>
");
            }
            );
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1024ac9f3a3ed10ac61200ed4a3a61571224a208111491", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<FourN.Data.Models.Projects>> Html { get; private set; }
    }
}
#pragma warning restore 1591
