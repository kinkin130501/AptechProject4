@model ExaminationViewModel
@{ 
                var stt = 0;
                var type = HelperViewData.GetEnumDisplayName((ExamTypes)Model.ExamType);
                var valuemax = Model.TotalTime * 60;
                var ran = new Random();
                var countEssay = 0;
                var examType = Model.ExamType; 
  }
<div>
    <h4>Examination: @Model.Name </h4>
    <h4>Type: @type </h4>
    <h4>Total question: @Model.TotalQuestion</h4>
    <h4>Total mark: @Model.MaxScore</h4>
    <h4>Pass mark: @Model.PassScore</h4>
    <h4>
        <b>Time: </b>@Model.TotalTime minute
    </h4>
    <div class="progress">
        <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="@valuemax" aria-valuemin="0" aria-valuemax="@valuemax" style="width: 100%">
            <span class="sr-only"></span>
        </div>
    </div>
    <input type="hidden" id="txtExamId" value="@Model.ExamId" />
    <input type="hidden" id="txtUserExamGuid" value="@ViewBag.UserExamGuid" />
</div>
<hr />
@if (Model.ExaminationQuestionsActives.Any())
{
@foreach (var item in Model.ExaminationQuestionsActives.OrderBy(no => no.OrderNo))
{
    stt++;
<div class="form-group">
    <b>Question @stt: </b>@item.Content
    <div class="b-double" style="padding:7px; margin-bottom:6px">
        @if (item.AnswerActive.Any())
        {
<ul style="list-style-type:none">
    @if (item.IsRandom)
    {
@foreach (var ans in item.AnswerActive.OrderBy(x => ran.Next()))
{
<li>
    <input type="radio" id="answer-id-@ans.AnswerId" name="answer-id-@stt" value="@ans.AnswerId">
    <label for="answer-id-@ans.AnswerId">
        <span>
            @ans.Content
        </span>
    </label>
</li>                            } }
                        else
                        {
@foreach (var ans in item.AnswerActive)
{
<li>
    <input type="radio" id="answer-id-@ans.AnswerId" name="answer-id-@stt" value="@ans.AnswerId">
    <label for="answer-id-@ans.AnswerId">
        <span>
            @ans.Content
        </span>
    </label>
</li>                            }                        }
</ul> }
                    else
                    {
<p>Không có đáp án, bạn được trọn điểm, liên hệ Giảng viên để báo cáo</p>                    }

    </div>
</div>}

                <div class="form-group">
                    @if (Model.ExamType == (int)ExamTypes.TracNghiem)
                    {
                        <button type="button" class="btn btn-primary" id="btnSubmitExam" onclick="submitExam()">Submit</button> 
                    }
                    <button type="button" class="btn btn-outline-warm" onclick="backToList()">Back</button>
                </div> }
                            else
                            {
                <div class="form-group text-center">
                    <h2 style="color: aquamarine">Not question in examination !</h2>
                    <h3>Add Question</h3>
                    <br />
                    <button type="button" class="btn btn-outline-warm" onclick="backToList()">Back</button>

                </div>}

<script>
    var progressBar = document.querySelector('.progress-bar');
    var myVar = setInterval(myTimer, 1000);
    var max = progressBar.getAttribute('aria-valuemax');
    var temp = max - 100;
    if (temp < 0) {
        temp = 0;
    }

    function myTimer() {
        var now = progressBar.getAttribute('aria-valuenow');

        if (now == max && max > 100) {
                now = 100 + temp - 1;
        } else {
            now = now - 1;
        }

        if (parseInt(now / max * 100) <= 60) {
            if ($(".progress-bar").hasClass('progress-bar-success')) {
                $(".progress-bar").removeClass('progress-bar-success').addClass('progress-bar-warning');
            }
        }

        if (parseInt(now / max * 100) <= 20) {
            if ($(".progress-bar").hasClass('progress-bar-warning')) {
                $(".progress-bar").removeClass('progress-bar-warning').addClass('progress-bar-danger');

            }
        }
        progressBar.setAttribute('aria-valuenow', now);

        if (parseInt(now) == 0) {
            submitExam();
            clearInterval(myVar);
        }
        console.log(now);
        console.log(now / max * 100);

        $(".progress-bar").css('width', now/max*100 + '%');
    }

    var passScore = "@Model.PassScore";
    var maxScore = "@Model.MaxScore";
    function submitExam() {
        var radio_arr = [];
        var txtExamId = parseInt($("#txtExamId").val());
        var txtUserExamGuid = $("#txtUserExamGuid").val();
        var txtTimeConsume = progressBar.getAttribute('aria-valuemax') - progressBar.getAttribute('aria-valuenow');
        $('ul').each(function () {
            radio_arr.push($(this).find('input[type=radio]:checked').length ? parseInt($(this).find('input[type=radio]:checked').val()) : null);
        });
        radio_arr = radio_arr.filter(Number);
        console.log(radio_arr)
        $.ajax({
            url: "/CandidateExamination/SubmitExam",
            type: "post",
            traditional: true,
            data: {
                answerArr: [radio_arr],
                txtExamId: txtExamId,
                txtUserExamGuid: txtUserExamGuid,
                txtTimeConsume: parseInt(txtTimeConsume)
            },
            success: function (res) {
                if (res < 0) {
                    toastr.error("Processing has error. Please try again.");
                } else {
                    var examType = @examType;
                    if (examType == 1) {
                        if (res >= parseFloat(passScore)) {
                            toastr.success("Configuration, you passed exam with mark: " + res + "/" + maxScore);
                        } else {
                            toastr.error("Sorry, you are failed.");
                        }
                    }

                }

                clearInterval(myVar);

                $("#btnSubmitExam").css('display', 'none').addClass('submited');
            },
            error: function () {
                alert("Có lỗi xảy ra, vui lòng thử lại sau");
            }
        });
    }

    function backToList() {
        var checkSubmited = $("#btnSubmitExam").hasClass('submited');
        if (checkSubmited == false) {
            var isOK = confirm("Bạn có chắc kết thúc bài thi?");

            if (isOK == true) {
                clearInterval(myVar);
                submitExam();
                showAll();
            }
        } else {
            clearInterval(myVar);
            showAll();
        }


    }
</script>
